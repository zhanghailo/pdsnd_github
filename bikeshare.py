{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "17bef254",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tabulate import tabulate\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "60184fe7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get the user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    while True:\n",
    "        city = input(\"Which city would you like to filter by?, New York City, Chicago or Washington?\").title()\n",
    "        if city in ('New York City','Chicago','Washington'):\n",
    "            break\n",
    "        else:\n",
    "            print(\"Try again\")\n",
    "            continue\n",
    "    \n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "    while True:\n",
    "        month = input(\"Which month would you like to filter by? January, February, March, April, May, June or type 'all' if you do not have any preference?\").title()\n",
    "        if month in ('January', 'February', 'March', 'April', 'May', 'June','All'):\n",
    "            break\n",
    "        else:\n",
    "            print(\"please try again\")\n",
    "            continue\n",
    "\n",
    "    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    while True:\n",
    "        day = input(\"Which day? Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or type 'all' if you do not have any preference.\").title()\n",
    "        if day in ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday','Saturday','All'):\n",
    "            break\n",
    "        else:\n",
    "            print(\"please try again\")\n",
    "            continue    \n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aec61364",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    df = pd.read_csv(CITY_DATA[city.lower()])\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    df['day'] = df['Start Time'].dt.strftime(\"%A\")\n",
    "    if month != 'All':\n",
    "        months = ['January','February','March','April','May','June']\n",
    "        month = months.index(month) + 1\n",
    "        df = df[df['month'] == month]\n",
    "    if day != 'All':\n",
    "        df = df[df['day']==day.title()]\n",
    "    return df\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0469146",
   "metadata": {},
   "outputs": [],
   "source": [
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display the most common month\n",
    "    Most_common_month = df['month'].mode()[0]\n",
    "    print('Most common month is:',Most_common_month)\n",
    "\n",
    "    # TO DO: display the most common day of week\n",
    "    Most_common_day = df['day'].mode()[0]\n",
    "    print(\"Most common day of week is:\", Most_common_day)\n",
    "\n",
    "    # TO DO: display the most common start hour\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    Most_common_hour = df['hour'].mode()[0]\n",
    "    print(\"Most common start hour is:\", Most_common_hour)\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "93d811e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "    Most_commonly_start_station = df['Start Station'].mode()[0]\n",
    "    print('Most commonly used start station is:', Most_commonly_start_station)\n",
    "    \n",
    "    # TO DO: display most commonly used end station\n",
    "    Most_commonly_end_station = df['End Station'].mode()[0]\n",
    "    print('Most commonly used end station is:', Most_commonly_end_station)\n",
    "    \n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "    Combination = df.groupby(['Start Station','End Station'])\n",
    "    Most_frequence_combination = Combination.size().sort_values(ascending=False).head(1)\n",
    "    print('Most frequent combination of start station and end station:\\n',Most_frequence_combination)\n",
    "    \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5b6c1aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "    total_travel_time = df['Trip Duration'].sum()\n",
    "    print('Total travel time is:',total_travel_time)\n",
    "    \n",
    "    # TO DO: display mean travel time\n",
    "    mean_travel_time = df['Trip Duration'].mean()\n",
    "    print('Mean travel time is:', mean_travel_time)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60dd8051",
   "metadata": {},
   "outputs": [],
   "source": [
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "    counts_user_type = df['User Type'].value_counts()\n",
    "    print('counts of user types are:\\n', counts_user_type)\n",
    "\n",
    "    # TO DO: Display counts of gender\n",
    "    try: \n",
    "        counts_of_gender = df['Gender'].value_counts()\n",
    "        print('counts of gender is:\\n', counts_of_gender)\n",
    "    except KeyError:\n",
    "        print(\"There isn't a [Gender] column in this spreedsheet!\")\n",
    "    \n",
    "\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "    try: \n",
    "        earlist = df['Birth Year'].min()\n",
    "        recent = df['Birth Year'].max()\n",
    "        most_common = df['Birth Year'].mode()[0]\n",
    "        print('earliest, most recent, and most common year of birth:\\n',earlist,recent,most_common)\n",
    "    except KeyError:     \n",
    "        print(\"There isn't a [Birth Year] column in this spreedsheet!\")\n",
    "        \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4c14f6e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def review_raw(df):\n",
    "    \"\"\"Display raw data for user\"\"\"\n",
    "    i = 0\n",
    "    while True:\n",
    "        review = input('\\nWould you like to review raw data? yes or no.\\n')        \n",
    "        if review.lower() != 'yes':\n",
    "            break\n",
    "        print(tabulate(df.iloc[np.arange(0+i,5+i)], headers =\"keys\"))\n",
    "        i+=5\n",
    "    print('-'*40)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a4baf098",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "        review_raw(df)\n",
    "            \n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fbcba4b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Let's explore some US bikeshare data!\n",
      "Which city would you like to filter by?, New York City, Chicago or Washington?Washington\n",
      "Which month would you like to filter by? January, February, March, April, May, June or type 'all' if you do not have any preference?all\n",
      "Which day? Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or type 'all' if you do not have any preference.all\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Frequent Times of Travel...\n",
      "\n",
      "Most common month is: 6\n",
      "Most common day of week is: Wednesday\n",
      "Most common start hour is: 8\n",
      "\n",
      "This took 0.045047760009765625 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Popular Stations and Trip...\n",
      "\n",
      "Most commonly used start station is: Columbus Circle / Union Station\n",
      "Most commonly used end station is: Columbus Circle / Union Station\n",
      "Most frequent combination of start station and end station:\n",
      " Start Station              End Station              \n",
      "Jefferson Dr & 14th St SW  Jefferson Dr & 14th St SW    673\n",
      "dtype: int64\n",
      "\n",
      "This took 0.09021687507629395 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating Trip Duration...\n",
      "\n",
      "Total travel time is: 371183985.484\n",
      "Mean travel time is: 1237.2799516133446\n",
      "\n",
      "This took 0.0 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "counts of user types are:\n",
      " Subscriber    220786\n",
      "Customer       79214\n",
      "Name: User Type, dtype: int64\n",
      "There isn't a [Gender] column in this spreedsheet!\n",
      "There isn't a [Birth Year] column in this spreedsheet!\n",
      "\n",
      "This took 0.015002012252807617 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Would you like to review raw data? yes or no.\n",
      "yes\n",
      "      Unnamed: 0  Start Time           End Time               Trip Duration  Start Station                                End Station                   User Type      month  day          hour\n",
      "--  ------------  -------------------  -------------------  ---------------  -------------------------------------------  ----------------------------  -----------  -------  ---------  ------\n",
      " 0       1621326  2017-06-21 08:36:34  2017-06-21 08:44:43          489.066  14th & Belmont St NW                         15th & K St NW                Subscriber         6  Wednesday       8\n",
      " 1        482740  2017-03-11 10:40:00  2017-03-11 10:46:00          402.549  Yuma St & Tenley Circle NW                   Connecticut Ave & Yuma St NW  Subscriber         3  Saturday       10\n",
      " 2       1330037  2017-05-30 01:02:59  2017-05-30 01:13:37          637.251  17th St & Massachusetts Ave NW               5th & K St NW                 Subscriber         5  Tuesday         1\n",
      " 3        665458  2017-04-02 07:48:35  2017-04-02 08:19:03         1827.34   Constitution Ave & 2nd St NW/DOL             M St & Pennsylvania Ave NW    Customer           4  Sunday          7\n",
      " 4       1481135  2017-06-10 08:36:28  2017-06-10 09:02:17         1549.43   Henry Bacon Dr & Lincoln Memorial Circle NW  Maine Ave & 7th St SW         Subscriber         6  Saturday        8\n",
      "\n",
      "Would you like to review raw data? yes or no.\n",
      "yes\n",
      "      Unnamed: 0  Start Time           End Time               Trip Duration  Start Station            End Station                                          User Type      month  day        hour\n",
      "--  ------------  -------------------  -------------------  ---------------  -----------------------  ---------------------------------------------------  -----------  -------  -------  ------\n",
      " 5       1148202  2017-05-14 07:18:18  2017-05-14 07:24:56          398      1st & K St SE            Eastern Market Metro / Pennsylvania Ave & 7th St SE  Subscriber         5  Sunday        7\n",
      " 6       1594275  2017-06-19 08:41:43  2017-06-19 09:00:08         1105.43   Park Rd & Holmead Pl NW  8th & H St NW                                        Subscriber         6  Monday        8\n",
      " 7       1601832  2017-06-20 05:54:42  2017-06-20 06:05:18          636.218  1st & D St SE            Potomac & Pennsylvania Ave SE                        Subscriber         6  Tuesday       5\n",
      " 8        574182  2017-03-24 20:37:00  2017-03-24 20:42:00          328.53   18th & R St NW           15th & P St NW                                       Subscriber         3  Friday       20\n",
      " 9        327058  2017-02-20 21:12:00  2017-02-20 21:31:00         1188.09   17th & Corcoran St NW    Lynn & 19th St North                                 Subscriber         2  Monday       21\n",
      "\n",
      "Would you like to review raw data? yes or no.\n",
      "no\n",
      "----------------------------------------\n",
      "\n",
      "Would you like to restart? Enter yes or no.\n",
      "no\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "\tmain()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
